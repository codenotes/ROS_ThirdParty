<?xml version="1.0" encoding="utf-8"?>
<!--GearVR plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <init>
  
  </init>

  <!-- optional updates applied to AndroidManifest.xml -->
  <androidManifestUpdates>
 
  </androidManifestUpdates>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>

    </insert>
  </proguardAdditions>


  <resourceCopies>
  
   		<isArch arch="armeabi-v7a">
						<copyFile src="$S(EngineDir)\Source\ThirdParty\ROS\Lib\Android\ARMv7\libROSJadeAndroid.so"
											  dst="$S(BuildDir)\libs\armeabi-v7a\libROSJadeAndroid.so" />
						
						<copyFile src="$S(EngineDir)\Source\ThirdParty\ROS\Lib\Android\java\ue4utils.jar"
									dst="$S(BuildDir)\libs\ue4utils.jar" />	

							
									
										  
		</isArch>		
						
		<isArch arch="arm64-v8a">
		
		
					<copyFile src="$S(EngineDir)\Source\ThirdParty\ROS\Lib\Android\ARM64\libROSJadeAndroid.so"
								dst="$S(BuildDir)\libs\arm64-v8a\libROSJadeAndroid.so" />

			
			  

					<copyFile src="$S(EngineDir)\Source\ThirdParty\ROS\Lib\Android\java\ue4utils.jar"
								dst="$S(BuildDir)\libs\ue4utils.jar" />			


						
		</isArch>
  </resourceCopies>

  
	<gameActivityImportAdditions>
	<insert>

	import android.content.Context;
	import android.net.wifi.WifiManager;
	import java.nio.ByteOrder;
	import java.net.InetAddress;
	import java.net.UnknownHostException;
	import java.math.BigInteger;
	
	
	import android.net.nsd.NsdManager;
    import android.net.nsd.NsdManager.DiscoveryListener;
    import android.net.nsd.NsdManager.ResolveListener;
    import android.net.nsd.NsdServiceInfo;
    import android.util.Log;
    import java.util.HashMap;
	
	import android.os.Build;
	import java.lang.reflect.Method;
	import com.Infusion.TailForGreg.*;

	</insert>
	</gameActivityImportAdditions>
	

  <!-- optional additions to the GameActivity class in GameActivity.java -->
  <gameActivityClassAdditions>
    <insert>
	
	FindServicesNSD mFindService;
	
	public String AndroidThunkJava_getHostName() 
	{
		try {
			Method getString = Build.class.getDeclaredMethod("getString", String.class);
			getString.setAccessible(true);
			return getString.invoke(null, "net.hostname").toString();
		} catch (Exception ex) 
		{
			return "";
		}
	}
	
	
	public void AndroidThunkJava_startDNSD(String proto)
	{
			//"_http._tcp" //this was the proto arg below 
			//Log.d("FindServicesNSD", "^Anything here2");
			mFindService=new FindServicesNSD((NsdManager)getSystemService(NSD_SERVICE), proto);
			mFindService.run();

	}


	 public   String AndroidThunkJava_getDNSDResolution(String name)//Context context)
	 {
			String res=mFindService.getResolution(name);

			return res;
	 }
	
	
	
   public static boolean AndroidThunkJava_Test1()
	{
		
		return true;
	}
	
	public   String AndroidThunkJava_Test2()
    {
		String s;
		s="foobat";
		
		return s;
	}
	
   public   String AndroidThunkJava_wifiIpAddress()//Context context)
    {


        Context context= getApplicationContext();

        WifiManager wifiManager = (WifiManager) context.getSystemService(WIFI_SERVICE);
        int ipAddress = wifiManager.getConnectionInfo().getIpAddress();

        // Convert little-endian to big-endianif needed
        if (ByteOrder.nativeOrder().equals(ByteOrder.LITTLE_ENDIAN)) {
            ipAddress = Integer.reverseBytes(ipAddress);
        }

        byte[] ipByteArray = BigInteger.valueOf(ipAddress).toByteArray();

        String ipAddressString;
        try {
            ipAddressString = InetAddress.getByAddress(ipByteArray).getHostAddress();
        } catch (UnknownHostException ex)
        {
      //      Log.e("WIFIIP", "Unable to get host address.");
            ipAddressString = "exception!";
        }

        return ipAddressString;
    }

	
    </insert>
  </gameActivityClassAdditions>

  <!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
  <gameActivityReadMetadataAdditions>
   
  </gameActivityReadMetadataAdditions>

  <!-- optional additions to GameActivity onCreate in GameActivity.java
	<gameActivityOnCreateAdditions>
	</gameActivityOnCreateAdditions>
	-->

  <!-- optional additions to GameActivity onDestroy in GameActivity.java
	<gameActivityOnDestroyAdditions>
	</gameActivityOnDestroyAdditions>
	-->

  <!-- optional additions to GameActivity onStart in GameActivity.java
	<gameActivityOnStartAdditions>
	</gameActivityOnStartAdditions>
	-->

  <!-- optional additions to GameActivity onStop in GameActivity.java
	<gameActivityOnStopAdditions>
	</gameActivityOnStopAdditions>
	-->

  <!-- optional additions to GameActivity onPause in GameActivity.java
	<gameActivityOnPauseAdditions>
	</gameActivityOnPauseAdditions>
	-->

  <!-- optional additions to GameActivity onResume in GameActivity.java
	<gameActivityOnResumeAdditions>
	</gameActivityOnResumeAdditions>
	-->

  <!-- optional additions to GameActivity onActivityResult in GameActivity.java
	<gameActivityOnActivityResultAdditions>
	</gameActivityOnActivityResultAdditions>
	-->

  <!-- optional libraries to load in GameActivity.java before libUE4.so 
  <soLoadLibrary>
		<loadLibrary name="gregtest2" failmsg="Failed to load myso library" />
  </soLoadLibrary>
	-->
</root>
